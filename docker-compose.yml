version: '3.8'

# Services we are going to use when running
services:
  # Database instance we need to store data
  postgres:
    image: postgres:latest
    restart: always
    container_name: db-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: liber
      POSTGRES_USER: chucvv
      POSTGRES_PASSWORD: postgres

  # Redis cache
  redis:
    image: "redis:alpine"
    container_name: "redis"
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]

  zoo1:
    image: zookeeper:3.4.9
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - /tmp/kafka/zoo1/data:/data
      - /tmp/kafka/zoo1/datalog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${pi:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /tmp/kafka/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1
    links:
      - zoo1

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zoo1
      - kafka1

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19092"
    depends_on:
      - kafka1
  # Backend instance that depends on database and caching instance to start.
  backend:
    image: chucvv/libertime:latest
    restart: always
    container_name: liber-apis
    mem_limit: 300m
    depends_on:
      - postgres
      - redis
      - zoo1
      - kafka1
      - kafka-schema-registry
    environment:
      - ENVIRONMENT=production
      - PORT=8080
      - HASH_SECRET_KEY=${HASH_SECRET_KEY}
      - REDIS_SECRET_KEY=${REDIS_SECRET_KEY}
      - DB_SERVERNAME=postgres
      - DB_NAME=liber
      - DB_USERNAME=chucvv
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "80:8080"